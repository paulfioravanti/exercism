%% Based on canonical data version 1.1.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/space-age/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(space_age_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").


equalFloat(A, B) ->
    ?assertEqual(B, round(A,2)).

round(Number, Precision) ->
    P = math:pow(10, Precision),
    round(Number * P) / P.


'1_age_on_earth_test'() ->
    equalFloat(space_age:age(earth, 1000000000), 3.169e+1).

'2_age_on_mercury_test'() ->
    equalFloat(space_age:age(mercury, 2134835688),
	       2.80879999999999995453e+2).

'3_age_on_venus_test'() ->
    equalFloat(space_age:age(venus, 189839836),
	       9.77999999999999936051).

'4_age_on_mars_test'() ->
    equalFloat(space_age:age(mars, 2329871239), 3.925e+1).

'5_age_on_jupiter_test'() ->
    equalFloat(space_age:age(jupiter, 901876382), 2.41).

'6_age_on_saturn_test'() ->
    equalFloat(space_age:age(saturn, 3000000000),
	       3.22999999999999998224).

'7_age_on_uranus_test'() ->
    equalFloat(space_age:age(uranus, 3210123456),
	       1.20999999999999996447).

'8_age_on_neptune_test'() ->
    equalFloat(space_age:age(neptune, 8210123456), 1.58).
